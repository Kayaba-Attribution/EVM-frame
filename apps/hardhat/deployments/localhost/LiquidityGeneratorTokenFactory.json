{
  "address": "0xefc1aB2475ACb7E60499Efb171D173be19928a05",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factoryManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "implementation_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tokenType",
          "type": "uint8"
        }
      ],
      "name": "TokenCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "charity",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "taxFeeBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "liquidityFeeBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "charityBps",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "maxTxBps",
          "type": "uint16"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flatFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "feeReceivingAddress",
          "type": "address"
        }
      ],
      "name": "setFeeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "setFlatFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation_",
          "type": "address"
        }
      ],
      "name": "setImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x138a33dce65cb98b8fbfe1f93f8aa35a2ef6d17d49b2ede0f6591a1c00909a81",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xefc1aB2475ACb7E60499Efb171D173be19928a05",
    "transactionIndex": 0,
    "gasUsed": "1391881",
    "logsBloom": "0x
    "blockHash": "0xe694f2425ce98cfd3a735eda054cd9aa864c7c56a7ad7a3c16891d3d10eaf01a",
    "transactionHash": "0x138a33dce65cb98b8fbfe1f93f8aa35a2ef6d17d49b2ede0f6591a1c00909a81",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 215067,
        "transactionHash": "0x138a33dce65cb98b8fbfe1f93f8aa35a2ef6d17d49b2ede0f6591a1c00909a81",
        "address": "0xefc1aB2475ACb7E60499Efb171D173be19928a05",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe694f2425ce98cfd3a735eda054cd9aa864c7c56a7ad7a3c16891d3d10eaf01a"
      }
    ],
    "blockNumber": 215067,
    "cumulativeGasUsed": "1391881",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfcDB4564c18A9134002b9771816092C9693622e3",
    "0xde2Bd2ffEA002b8E84ADeA96e5976aF664115E2c"
  ],
  "numDeployments": 5,
  "solcInputHash": "2736dbf12be78575a797fcb296781073",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"charity\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"taxFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidityFeeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"charityBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxTxBps\",\"type\":\"uint16\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flatFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeReceivingAddress\",\"type\":\"address\"}],\"name\":\"setFeeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFlatFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"name\":\"setImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/factories/LiquidityGeneratorTokenFactory.sol\":\"LiquidityGeneratorTokenFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x1cc0efb01cbf008b768fd7b334786a6e358809198bb7e67f1c530af4957c6a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/factories/LiquidityGeneratorTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./TokenFactoryBase.sol\\\";\\nimport \\\"../interfaces/ILiquidityGeneratorToken.sol\\\";\\n\\n\\ncontract LiquidityGeneratorTokenFactory is TokenFactoryBase {\\n  using Address for address payable;\\n\\n  constructor(address factoryManager_, address implementation_) TokenFactoryBase(factoryManager_, implementation_) {}\\n\\n  function create(\\n    string memory name,\\n    string memory symbol,\\n    uint256 totalSupply,\\n    address router,\\n    address charity,\\n    uint16 taxFeeBps, \\n    uint16 liquidityFeeBps,\\n    uint16 charityBps,\\n    uint16 maxTxBps\\n  ) external payable enoughFee nonReentrant returns (address token) {\\n    refundExcessiveFee();\\n    payable(feeTo).sendValue(flatFee);\\n    token = Clones.clone(implementation);\\n    //ILiquidityGeneratorToken(token).transferOwnership(msg.sender);\\n    ILiquidityGeneratorToken(token).initialize(\\n      msg.sender,\\n      name,\\n      symbol,\\n      totalSupply,\\n      router,\\n      charity,\\n      taxFeeBps,\\n      liquidityFeeBps,\\n      charityBps,\\n      maxTxBps\\n    );\\n    assignTokenToOwner(msg.sender, token, 1);\\n    emit TokenCreated(msg.sender, token, 1);\\n  }\\n}\",\"keccak256\":\"0x0580688c4e7038a594b3e5d929ab2236c3b8b893701ec29a3d0e1522e9348f0c\",\"license\":\"MIT\"},\"src/factories/TokenFactoryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../interfaces/IFactoryManager.sol\\\";\\n\\n\\ncontract TokenFactoryBase is Ownable, ReentrancyGuard {\\n  using Address for address payable;\\n\\n  address public factoryManager;\\n  address public implementation;\\n  address public feeTo;\\n  uint256 public flatFee;\\n\\n  event TokenCreated(\\n      address indexed owner,\\n      address indexed token,\\n      uint8 tokenType\\n  );\\n\\n  modifier enoughFee() {\\n    require(msg.value >= flatFee, \\\"Flat fee\\\");\\n    _;\\n  }\\n\\n  constructor(address factoryManager_, address implementation_) {\\n    factoryManager = factoryManager_;\\n    implementation = implementation_;\\n    feeTo = msg.sender;\\n    flatFee = 1;\\n  }\\n\\n  function setImplementation(address implementation_) external onlyOwner {\\n    implementation = implementation_;\\n  }\\n\\n  function setFeeTo(address feeReceivingAddress) external onlyOwner {\\n    feeTo = feeReceivingAddress;\\n  }\\n\\n  function setFlatFee(uint256 fee) external onlyOwner {\\n    flatFee = fee;\\n  }\\n\\n  function assignTokenToOwner(address owner, address token, uint8 tokenType) internal {\\n    IFactoryManager(factoryManager).assignTokensToOwner(owner, token, tokenType);\\n  }\\n\\n  function refundExcessiveFee() internal {\\n    uint256 refund = msg.value - flatFee;\\n    if (refund > 0) {\\n      payable(msg.sender).sendValue(refund);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa52e3c7404d5de7650c49d40c2110d08544d6c8b6da255705048d8732d27027f\",\"license\":\"MIT\"},\"src/interfaces/IFactoryManager.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\ninterface IFactoryManager {\\n  function assignTokensToOwner(address owner, address token, uint8 tokenType) external;\\n}\",\"keccak256\":\"0xde4ec619436a5602c0bea60bfff2f329964fbad079ba5890cb1e0bad5f59a6cb\",\"license\":\"UNLICENSED\"},\"src/interfaces/ILiquidityGeneratorToken.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.5.0;\\n\\ninterface ILiquidityGeneratorToken {\\n    function initialize (\\n        address owner_,\\n        string memory name_, \\n        string memory symbol_, \\n        uint256 totalSupply_, \\n        address router_,\\n        address charityAddress_,\\n        uint16 taxFeeBps_, \\n        uint16 liquidityFeeBps_,\\n        uint16 charityFeeBps_,\\n        uint16 maxTxBps_\\n    ) external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\",\"keccak256\":\"0x4ed2ed2b573d6b8233cff743fe9092d4ee8a6197dee1651b62da8baa4644ba33\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200186538038062001865833981810160405281019062000037919062000218565b8181620000596200004d6200013560201b60201c565b6200013d60201b60201c565b6001808190555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160058190555050505050620002a7565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008151905062000212816200028d565b92915050565b600080604083850312156200022c57600080fd5b60006200023c8582860162000201565b92505060206200024f8582860162000201565b9150509250929050565b600062000266826200026d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620002988162000259565b8114620002a457600080fd5b50565b6115ae80620002b76000396000f3fe60806040526004361061009c5760003560e01c8063715018a611610064578063715018a61461017b5780638da5cb5b14610192578063d784d426146101bd578063d9eb5947146101e6578063f2fde38b14610211578063f46901ed1461023a5761009c565b8063017e7e58146100a1578063032b5a73146100cc57806323fa495a146100f75780634a3cef63146101205780635c60da1b14610150575b600080fd5b3480156100ad57600080fd5b506100b6610263565b6040516100c39190610fb7565b60405180910390f35b3480156100d857600080fd5b506100e1610289565b6040516100ee9190610fb7565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610ddd565b6102af565b005b61013a60048036038101906101359190610ce7565b610335565b6040516101479190610fb7565b60405180910390f35b34801561015c57600080fd5b5061016561054f565b6040516101729190610fb7565b60405180910390f35b34801561018757600080fd5b50610190610575565b005b34801561019e57600080fd5b506101a76105fd565b6040516101b49190610fb7565b60405180910390f35b3480156101c957600080fd5b506101e460048036038101906101df9190610cbe565b610626565b005b3480156101f257600080fd5b506101fb6106e6565b60405161020891906111ae565b60405180910390f35b34801561021d57600080fd5b5061023860048036038101906102339190610cbe565b6106ec565b005b34801561024657600080fd5b50610261600480360381019061025c9190610cbe565b6107e4565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102b76108a4565b73ffffffffffffffffffffffffffffffffffffffff166102d56105fd565b73ffffffffffffffffffffffffffffffffffffffff161461032b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103229061114e565b60405180910390fd5b8060058190555050565b600060055434101561037c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103739061116e565b60405180910390fd5b600260015414156103c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b99061118e565b60405180910390fd5b60026001819055506103d26108ac565b61041f600554600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108f490919063ffffffff16565b61044a600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166109e8565b90508073ffffffffffffffffffffffffffffffffffffffff1663b00544f6338c8c8c8c8c8c8c8c8c6040518b63ffffffff1660e01b81526004016104979a99989796959493929190611009565b600060405180830381600087803b1580156104b157600080fd5b505af11580156104c5573d6000803e3d6000fd5b505050506104d533826001610abd565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f49fab9e82f453b3b0e1b0e507a645552d8b351f9b3cb0c9a7b4df572780c6b2f600160405161053391906110b3565b60405180910390a3600180819055509998505050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61057d6108a4565b73ffffffffffffffffffffffffffffffffffffffff1661059b6105fd565b73ffffffffffffffffffffffffffffffffffffffff16146105f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e89061114e565b60405180910390fd5b6105fb6000610b53565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61062e6108a4565b73ffffffffffffffffffffffffffffffffffffffff1661064c6105fd565b73ffffffffffffffffffffffffffffffffffffffff16146106a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106999061114e565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60055481565b6106f46108a4565b73ffffffffffffffffffffffffffffffffffffffff166107126105fd565b73ffffffffffffffffffffffffffffffffffffffff1614610768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075f9061114e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cf906110ce565b60405180910390fd5b6107e181610b53565b50565b6107ec6108a4565b73ffffffffffffffffffffffffffffffffffffffff1661080a6105fd565b73ffffffffffffffffffffffffffffffffffffffff1614610860576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108579061114e565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000600554346108bc9190611246565b905060008111156108f1576108f0813373ffffffffffffffffffffffffffffffffffffffff166108f490919063ffffffff16565b5b50565b80471015610937576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092e9061110e565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161095d90610fa2565b60006040518083038185875af1925050503d806000811461099a576040519150601f19603f3d011682016040523d82523d6000602084013e61099f565b606091505b50509050806109e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109da906110ee565b60405180910390fd5b505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ab8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaf9061112e565b60405180910390fd5b919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328220dea8484846040518463ffffffff1660e01b8152600401610b1c93929190610fd2565b600060405180830381600087803b158015610b3657600080fd5b505af1158015610b4a573d6000803e3d6000fd5b50505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000610c2a610c25846111ee565b6111c9565b905082815260208101848484011115610c4257600080fd5b610c4d8482856112e3565b509392505050565b600081359050610c6481611533565b92915050565b600082601f830112610c7b57600080fd5b8135610c8b848260208601610c17565b91505092915050565b600081359050610ca38161154a565b92915050565b600081359050610cb881611561565b92915050565b600060208284031215610cd057600080fd5b6000610cde84828501610c55565b91505092915050565b60008060008060008060008060006101208a8c031215610d0657600080fd5b60008a013567ffffffffffffffff811115610d2057600080fd5b610d2c8c828d01610c6a565b99505060208a013567ffffffffffffffff811115610d4957600080fd5b610d558c828d01610c6a565b9850506040610d668c828d01610ca9565b9750506060610d778c828d01610c55565b9650506080610d888c828d01610c55565b95505060a0610d998c828d01610c94565b94505060c0610daa8c828d01610c94565b93505060e0610dbb8c828d01610c94565b925050610100610dcd8c828d01610c94565b9150509295985092959850929598565b600060208284031215610def57600080fd5b6000610dfd84828501610ca9565b91505092915050565b610e0f8161127a565b82525050565b610e1e816112d1565b82525050565b6000610e2f8261121f565b610e398185611235565b9350610e498185602086016112f2565b610e52816113b4565b840191505092915050565b6000610e6a602683611235565b9150610e75826113c5565b604082019050919050565b6000610e8d603a83611235565b9150610e9882611414565b604082019050919050565b6000610eb0601d83611235565b9150610ebb82611463565b602082019050919050565b6000610ed3601683611235565b9150610ede8261148c565b602082019050919050565b6000610ef6602083611235565b9150610f01826114b5565b602082019050919050565b6000610f1960008361122a565b9150610f24826114de565b600082019050919050565b6000610f3c600883611235565b9150610f47826114e1565b602082019050919050565b6000610f5f601f83611235565b9150610f6a8261150a565b602082019050919050565b610f7e8161128c565b82525050565b610f8d816112ba565b82525050565b610f9c816112c4565b82525050565b6000610fad82610f0c565b9150819050919050565b6000602082019050610fcc6000830184610e06565b92915050565b6000606082019050610fe76000830186610e06565b610ff46020830185610e06565b6110016040830184610f93565b949350505050565b60006101408201905061101f600083018d610e06565b8181036020830152611031818c610e24565b90508181036040830152611045818b610e24565b9050611054606083018a610f84565b6110616080830189610e06565b61106e60a0830188610e06565b61107b60c0830187610f75565b61108860e0830186610f75565b611096610100830185610f75565b6110a4610120830184610f75565b9b9a5050505050505050505050565b60006020820190506110c86000830184610e15565b92915050565b600060208201905081810360008301526110e781610e5d565b9050919050565b6000602082019050818103600083015261110781610e80565b9050919050565b6000602082019050818103600083015261112781610ea3565b9050919050565b6000602082019050818103600083015261114781610ec6565b9050919050565b6000602082019050818103600083015261116781610ee9565b9050919050565b6000602082019050818103600083015261118781610f2f565b9050919050565b600060208201905081810360008301526111a781610f52565b9050919050565b60006020820190506111c36000830184610f84565b92915050565b60006111d36111e4565b90506111df8282611325565b919050565b6000604051905090565b600067ffffffffffffffff82111561120957611208611385565b5b611212826113b4565b9050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000611251826112ba565b915061125c836112ba565b92508282101561126f5761126e611356565b5b828203905092915050565b60006112858261129a565b9050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006112dc826112c4565b9050919050565b82818337600083830152505050565b60005b838110156113105780820151818401526020810190506112f5565b8381111561131f576000848401525b50505050565b61132e826113b4565b810181811067ffffffffffffffff8211171561134d5761134c611385565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b50565b7f466c617420666565000000000000000000000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b61153c8161127a565b811461154757600080fd5b50565b6115538161128c565b811461155e57600080fd5b50565b61156a816112ba565b811461157557600080fd5b5056fea26469706673582212200b9b911526ef389d5477b90b68e75acff9662fc79ae79675e2b3f647ba75546664736f6c63430008010033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c8063715018a611610064578063715018a61461017b5780638da5cb5b14610192578063d784d426146101bd578063d9eb5947146101e6578063f2fde38b14610211578063f46901ed1461023a5761009c565b8063017e7e58146100a1578063032b5a73146100cc57806323fa495a146100f75780634a3cef63146101205780635c60da1b14610150575b600080fd5b3480156100ad57600080fd5b506100b6610263565b6040516100c39190610fb7565b60405180910390f35b3480156100d857600080fd5b506100e1610289565b6040516100ee9190610fb7565b60405180910390f35b34801561010357600080fd5b5061011e60048036038101906101199190610ddd565b6102af565b005b61013a60048036038101906101359190610ce7565b610335565b6040516101479190610fb7565b60405180910390f35b34801561015c57600080fd5b5061016561054f565b6040516101729190610fb7565b60405180910390f35b34801561018757600080fd5b50610190610575565b005b34801561019e57600080fd5b506101a76105fd565b6040516101b49190610fb7565b60405180910390f35b3480156101c957600080fd5b506101e460048036038101906101df9190610cbe565b610626565b005b3480156101f257600080fd5b506101fb6106e6565b60405161020891906111ae565b60405180910390f35b34801561021d57600080fd5b5061023860048036038101906102339190610cbe565b6106ec565b005b34801561024657600080fd5b50610261600480360381019061025c9190610cbe565b6107e4565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6102b76108a4565b73ffffffffffffffffffffffffffffffffffffffff166102d56105fd565b73ffffffffffffffffffffffffffffffffffffffff161461032b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103229061114e565b60405180910390fd5b8060058190555050565b600060055434101561037c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103739061116e565b60405180910390fd5b600260015414156103c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b99061118e565b60405180910390fd5b60026001819055506103d26108ac565b61041f600554600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108f490919063ffffffff16565b61044a600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166109e8565b90508073ffffffffffffffffffffffffffffffffffffffff1663b00544f6338c8c8c8c8c8c8c8c8c6040518b63ffffffff1660e01b81526004016104979a99989796959493929190611009565b600060405180830381600087803b1580156104b157600080fd5b505af11580156104c5573d6000803e3d6000fd5b505050506104d533826001610abd565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f49fab9e82f453b3b0e1b0e507a645552d8b351f9b3cb0c9a7b4df572780c6b2f600160405161053391906110b3565b60405180910390a3600180819055509998505050505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61057d6108a4565b73ffffffffffffffffffffffffffffffffffffffff1661059b6105fd565b73ffffffffffffffffffffffffffffffffffffffff16146105f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e89061114e565b60405180910390fd5b6105fb6000610b53565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61062e6108a4565b73ffffffffffffffffffffffffffffffffffffffff1661064c6105fd565b73ffffffffffffffffffffffffffffffffffffffff16146106a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106999061114e565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60055481565b6106f46108a4565b73ffffffffffffffffffffffffffffffffffffffff166107126105fd565b73ffffffffffffffffffffffffffffffffffffffff1614610768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075f9061114e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156107d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107cf906110ce565b60405180910390fd5b6107e181610b53565b50565b6107ec6108a4565b73ffffffffffffffffffffffffffffffffffffffff1661080a6105fd565b73ffffffffffffffffffffffffffffffffffffffff1614610860576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108579061114e565b60405180910390fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b6000600554346108bc9190611246565b905060008111156108f1576108f0813373ffffffffffffffffffffffffffffffffffffffff166108f490919063ffffffff16565b5b50565b80471015610937576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092e9061110e565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161095d90610fa2565b60006040518083038185875af1925050503d806000811461099a576040519150601f19603f3d011682016040523d82523d6000602084013e61099f565b606091505b50509050806109e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109da906110ee565b60405180910390fd5b505050565b60006040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528260601b60148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f0915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610ab8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aaf9061112e565b60405180910390fd5b919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166328220dea8484846040518463ffffffff1660e01b8152600401610b1c93929190610fd2565b600060405180830381600087803b158015610b3657600080fd5b505af1158015610b4a573d6000803e3d6000fd5b50505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000610c2a610c25846111ee565b6111c9565b905082815260208101848484011115610c4257600080fd5b610c4d8482856112e3565b509392505050565b600081359050610c6481611533565b92915050565b600082601f830112610c7b57600080fd5b8135610c8b848260208601610c17565b91505092915050565b600081359050610ca38161154a565b92915050565b600081359050610cb881611561565b92915050565b600060208284031215610cd057600080fd5b6000610cde84828501610c55565b91505092915050565b60008060008060008060008060006101208a8c031215610d0657600080fd5b60008a013567ffffffffffffffff811115610d2057600080fd5b610d2c8c828d01610c6a565b99505060208a013567ffffffffffffffff811115610d4957600080fd5b610d558c828d01610c6a565b9850506040610d668c828d01610ca9565b9750506060610d778c828d01610c55565b9650506080610d888c828d01610c55565b95505060a0610d998c828d01610c94565b94505060c0610daa8c828d01610c94565b93505060e0610dbb8c828d01610c94565b925050610100610dcd8c828d01610c94565b9150509295985092959850929598565b600060208284031215610def57600080fd5b6000610dfd84828501610ca9565b91505092915050565b610e0f8161127a565b82525050565b610e1e816112d1565b82525050565b6000610e2f8261121f565b610e398185611235565b9350610e498185602086016112f2565b610e52816113b4565b840191505092915050565b6000610e6a602683611235565b9150610e75826113c5565b604082019050919050565b6000610e8d603a83611235565b9150610e9882611414565b604082019050919050565b6000610eb0601d83611235565b9150610ebb82611463565b602082019050919050565b6000610ed3601683611235565b9150610ede8261148c565b602082019050919050565b6000610ef6602083611235565b9150610f01826114b5565b602082019050919050565b6000610f1960008361122a565b9150610f24826114de565b600082019050919050565b6000610f3c600883611235565b9150610f47826114e1565b602082019050919050565b6000610f5f601f83611235565b9150610f6a8261150a565b602082019050919050565b610f7e8161128c565b82525050565b610f8d816112ba565b82525050565b610f9c816112c4565b82525050565b6000610fad82610f0c565b9150819050919050565b6000602082019050610fcc6000830184610e06565b92915050565b6000606082019050610fe76000830186610e06565b610ff46020830185610e06565b6110016040830184610f93565b949350505050565b60006101408201905061101f600083018d610e06565b8181036020830152611031818c610e24565b90508181036040830152611045818b610e24565b9050611054606083018a610f84565b6110616080830189610e06565b61106e60a0830188610e06565b61107b60c0830187610f75565b61108860e0830186610f75565b611096610100830185610f75565b6110a4610120830184610f75565b9b9a5050505050505050505050565b60006020820190506110c86000830184610e15565b92915050565b600060208201905081810360008301526110e781610e5d565b9050919050565b6000602082019050818103600083015261110781610e80565b9050919050565b6000602082019050818103600083015261112781610ea3565b9050919050565b6000602082019050818103600083015261114781610ec6565b9050919050565b6000602082019050818103600083015261116781610ee9565b9050919050565b6000602082019050818103600083015261118781610f2f565b9050919050565b600060208201905081810360008301526111a781610f52565b9050919050565b60006020820190506111c36000830184610f84565b92915050565b60006111d36111e4565b90506111df8282611325565b919050565b6000604051905090565b600067ffffffffffffffff82111561120957611208611385565b5b611212826113b4565b9050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000611251826112ba565b915061125c836112ba565b92508282101561126f5761126e611356565b5b828203905092915050565b60006112858261129a565b9050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006112dc826112c4565b9050919050565b82818337600083830152505050565b60005b838110156113105780820151818401526020810190506112f5565b8381111561131f576000848401525b50505050565b61132e826113b4565b810181811067ffffffffffffffff8211171561134d5761134c611385565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b7f455243313136373a20637265617465206661696c656400000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b50565b7f466c617420666565000000000000000000000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b61153c8161127a565b811461154757600080fd5b50565b6115538161128c565b811461155e57600080fd5b50565b61156a816112ba565b811461157557600080fd5b5056fea26469706673582212200b9b911526ef389d5477b90b68e75acff9662fc79ae79675e2b3f647ba75546664736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/factories/LiquidityGeneratorTokenFactory.sol:LiquidityGeneratorTokenFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 195,
        "contract": "src/factories/LiquidityGeneratorTokenFactory.sol:LiquidityGeneratorTokenFactory",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 736,
        "contract": "src/factories/LiquidityGeneratorTokenFactory.sol:LiquidityGeneratorTokenFactory",
        "label": "factoryManager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 738,
        "contract": "src/factories/LiquidityGeneratorTokenFactory.sol:LiquidityGeneratorTokenFactory",
        "label": "implementation",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 740,
        "contract": "src/factories/LiquidityGeneratorTokenFactory.sol:LiquidityGeneratorTokenFactory",
        "label": "feeTo",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 742,
        "contract": "src/factories/LiquidityGeneratorTokenFactory.sol:LiquidityGeneratorTokenFactory",
        "label": "flatFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}