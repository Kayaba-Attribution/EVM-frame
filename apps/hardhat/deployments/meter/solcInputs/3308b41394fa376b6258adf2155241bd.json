{
  "language": "Solidity",
  "sources": {
    "src/NFTminter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity 0.8.1;\n\n//import \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\ninterface NFTcontract {\n    function makeAnEpicNFT() external;\n}\ncontract NFTminter is IERC721Receiver{\n\n        /**\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n\n    string constant owner_name = \"Kayaba_Attribution\";\n    address private owner;\n    function viewOwner() public view returns (address){\n        return owner;\n    }\n\n    function viewOwnerName() public view returns (string memory){\n        return  owner_name;\n    }\n\n    constructor(){\n        owner = msg.sender;\n    }\n\n    function mint_NFTS(address NFTaddress, uint16 amount_) public {\n\n        for (uint i=0; i < amount_; i++){\n            NFTcontract(NFTaddress).makeAnEpicNFT();\n        }\n    }\n\n    \n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}